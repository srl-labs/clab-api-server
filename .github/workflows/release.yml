name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write # Needed for uploading release assets
  packages: write # Needed for pushing packages (Docker images) to GHCR

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    #---------------------------------------------------------------
    # 1 — Checkout with full history (tags needed for git describe)
    #---------------------------------------------------------------
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    #---------------------------------------------------------------
    # 2 — Export build‑time metadata (VERSION, COMMIT, DATE)
    #---------------------------------------------------------------
    - name: Export build metadata
      run: |
        # Use the release tag name directly for VERSION
        echo "VERSION=${{ github.event.release.tag_name }}" >>"$GITHUB_ENV"
        echo "COMMIT=$(git rev-parse --short HEAD || echo unknown)" >>"$GITHUB_ENV"
        echo "DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >>"$GITHUB_ENV"
        echo "REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

    #---------------------------------------------------------------
    # 3 — Fast Go installer
    #---------------------------------------------------------------
    - name: Setup Go (fast)
      uses: WillAbides/setup-go-faster@v1.14.0
      with:
        go-version: '1.21.x' # Consider updating if needed

    #---------------------------------------------------------------
    # 4 — Fix mirrors, add arm64 repos, install cross tool‑chain
    #---------------------------------------------------------------
    - name: Configure apt and install cross tool‑chain
      run: |
        set -euxo pipefail
        sudo dpkg --add-architecture arm64
        sudo sed -Ei 's|http://azure\.archive\.ubuntu\.com/ubuntu|http://archive.ubuntu.com/ubuntu|g' /etc/apt/sources.list
        sudo sed -Ei 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
        sudo tee /etc/apt/sources.list.d/arm64-ports.list > /dev/null <<'EOF'
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
        deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse
        EOF
        for i in {1..5}; do sudo apt-get update -qq && break || sleep 5; done
        for i in {1..5}; do \
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            gcc-aarch64-linux-gnu \
            linux-libc-dev:arm64 \
            libpam0g-dev \
            libpam0g-dev:arm64 \
          && break || { sudo apt-get -y --fix-broken install || true; sleep 5; }; \
        done
        dpkg -l gcc-aarch64-linux-gnu linux-libc-dev:arm64 libpam0g-dev:arm64

    #---------------------------------------------------------------
    # 5 — Cache Go modules / build cache
    #---------------------------------------------------------------
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    #---------------------------------------------------------------
    # 6 — Build linux/amd64 binary
    #---------------------------------------------------------------
    - name: Build linux/amd64 binary
      run: |
        mkdir -p dist
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
        go build -trimpath -ldflags "-s -w \
          -X main.version=${VERSION} \
          -X main.commit=${COMMIT} \
          -X main.date=${DATE}" \
          -o dist/clab-api-server-linux-amd64 ./cmd/server

    #---------------------------------------------------------------
    # 7 — Build linux/arm64 binary
    #---------------------------------------------------------------
    - name: Build linux/arm64 binary
      env:
        CC: aarch64-linux-gnu-gcc
        PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
      run: |
        CGO_ENABLED=1 GOOS=linux GOARCH=arm64 \
        go build -trimpath -ldflags "-s -w \
          -X main.version=${VERSION} \
          -X main.commit=${COMMIT} \
          -X main.date=${DATE}" \
          -o dist/clab-api-server-linux-arm64 ./cmd/server

    #---------------------------------------------------------------
    # 8 — Make binaries executable (Optional but good practice)
    #---------------------------------------------------------------
    - name: Make binaries executable
      run: |
        chmod +x dist/clab-api-server-linux-*

    #---------------------------------------------------------------
    # Docker Buildx Setup and Login
    #---------------------------------------------------------------
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    #---------------------------------------------------------------
    # Extract Docker metadata (tags, labels)
    #---------------------------------------------------------------
    - name: Extract Docker metadata for simple-container
      id: meta_simple
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ env.REPO_LOWER }}/clab-api-server # Use lowercase repo name
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}} # e.g., v1.2.3
          type=semver,pattern={{major}}.{{minor}} # e.g., v1.2
          type=sha # Git SHA

    #---------------------------------------------------------------
    # Build and push simple-container multi-arch image
    #---------------------------------------------------------------
    - name: Build and push simple-container
      uses: docker/build-push-action@v6
      with:
        context: . # Build context is the repo root
        file: ./docker/simple-container/Dockerfile # Path to the Dockerfile
        platforms: linux/amd64,linux/arm64 # Target platforms
        push: true # Push the image to the registry
        tags: ${{ steps.meta_simple.outputs.tags }} # Use tags generated by metadata-action
        labels: ${{ steps.meta_simple.outputs.labels }} # Use labels generated by metadata-action
        cache-from: type=gha # Enable GitHub Actions cache for build layers
        cache-to: type=gha,mode=max

    #---------------------------------------------------------------
    # Extract Docker metadata for builder image
    #---------------------------------------------------------------
    - name: Extract Docker metadata for builder image
      id: meta_builder
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ env.REPO_LOWER }}/clab-api-builder # Use the same repo namespace
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}} # e.g., v1.2.3
          type=semver,pattern={{major}}.{{minor}} # e.g., v1.2
          latest

    #---------------------------------------------------------------
    # Build and push builder image
    #---------------------------------------------------------------
    - name: Build and push builder image
      uses: docker/build-push-action@v6
      with:
        context: . # Build context is the repo root
        file: ./docker/build.dockerfile # Path to the builder Dockerfile
        platforms: linux/amd64,linux/arm64 # Target platforms
        push: true # Push the image to the registry
        tags: ${{ steps.meta_builder.outputs.tags }} # Use tags generated by metadata-action
        labels: ${{ steps.meta_builder.outputs.labels }} # Use labels generated by metadata-action
        cache-from: type=gha # Enable GitHub Actions cache for build layers
        cache-to: type=gha,mode=max

    #---------------------------------------------------------------
    # 9 — Upload binaries to the GitHub Release page
    #---------------------------------------------------------------
    - name: Upload Release Assets (Binaries)
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/clab-api-server-linux-amd64
          dist/clab-api-server-linux-arm64